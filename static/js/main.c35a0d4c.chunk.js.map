{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["PriceFilter","props","filter","bind","getValue","pricesChecks","document","getElementsByName","checked","i","length","push","value","this","onFilter","filterData","map","item","Fragment","type","name","className","onClick","column","text","React","Component","App","useState","quantity","callback","Array","from","index","id","price","productsGenerator","products","productNames","productPrices","columns","dataField","customFilter","FILTER_TYPES","MULTISELECT","filterRenderer","keyField","data","filterFactory","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"6SAQMA,E,kDAKJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,OAAS,EAAKA,OAAOC,KAAZ,gBACd,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBAHC,E,4CAKnB,WAGE,IAFA,IAAME,EAAeC,SAASC,kBAAkB,gBAC5CC,EAAU,GACNC,EAAI,EAAGA,EAAIJ,EAAaK,OAAQD,IACnCJ,EAAaI,GAAGD,SACjBA,EAAQG,KAAKN,EAAaI,GAAGG,OAGjC,OAAOJ,I,oBAET,WACEK,KAAKZ,MAAMa,SAASD,KAAKT,c,oBAE3B,WACE,MAAO,CACL,uBACAS,KAAKZ,MAAMc,WAAWC,KAAI,SAACC,GACzB,OACE,eAAC,IAAMC,SAAP,WACE,uBAAOC,KAAK,WAAWP,MAAOK,EAAMG,KAAK,iBACzC,gCAAQH,IACR,6BAGN,wBAEEI,UAAU,kBACVC,QAAUT,KAAKX,OAHjB,0BAKcW,KAAKZ,MAAMsB,OAAOC,OAJ1B,e,GAnCcC,IAAMC,WA0FjBC,MA5Cf,WACE,IADa,EAemBC,mBAdN,WAA6B,IAA5BC,EAA2B,uDAAhB,EAAGC,EAAa,uCACpD,OAAIA,EAAiBC,MAAMC,KAAK,CAAEtB,OAAQmB,GAAYC,GAIpDC,MAAMC,KAAK,CAAEtB,OAAQmB,IAAY,SAACjB,EAAOqB,GAAR,MAAmB,CAClDC,GAAID,EACJb,KAAK,aAAD,OAAea,GACnBE,MAAO,KAAOF,MAMqBG,IAf5B,mBAeNC,EAfM,KAiBPC,GAjBO,KAiBQD,EAASrB,KAAI,SAAAC,GAAI,OAAIA,EAAKG,SACzCmB,EAAgBF,EAASrB,KAAI,SAAAC,GAAI,OAAIA,EAAKkB,SAE1CK,EAAU,CAAC,CACfC,UAAW,KACXjB,KAAM,cACL,CACDiB,UAAW,OACXjB,KAAM,eACNtB,OAAQwC,uBAAa,CACnBvB,KAAMwB,eAAaC,cAErBC,eAAgB,SAAC/B,EAAUS,GAAX,OACd,cAAC,EAAD,CAAaT,SAAWA,EAAWS,OAASA,EAASR,WAAYuB,MAClE,CACDG,UAAW,QACXjB,KAAM,gBACNtB,OAAQwC,uBAAa,CACnBvB,KAAMwB,eAAaC,cAErBC,eAAgB,SAAC/B,EAAUS,GAAX,OACd,cAAC,EAAD,CAAaT,SAAWA,EAAWS,OAASA,EAASR,WAAYwB,OAGrE,OAAO,cAAC,IAAD,CAAgBO,SAAS,KAAKC,KAAOV,EAAWG,QAAUA,EAAUtC,OAAS8C,SCnFvEC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFtD,SAASuD,eAAe,SAM1BZ,M","file":"static/js/main.c35a0d4c.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport filterFactory, { textFilter, customFilter, FILTER_TYPES } from 'react-bootstrap-table2-filter';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\nimport 'react-bootstrap-table2-filter/dist/react-bootstrap-table2-filter.min.css';\n\nclass PriceFilter extends React.Component {\n  static propTypes = {\n    column: PropTypes.object.isRequired,\n    onFilter: PropTypes.func.isRequired\n  }\n  constructor(props) {\n    super(props);\n    this.filter = this.filter.bind(this);\n    this.getValue = this.getValue.bind(this);\n  }\n  getValue() {\n    const pricesChecks = document.getElementsByName('price_filter');\n    let checked = [];\n    for(let i = 0; i < pricesChecks.length; i++) {\n      if(pricesChecks[i].checked) {\n        checked.push(pricesChecks[i].value);\n      }\n    }\n    return checked;\n  }\n  filter() {\n    this.props.onFilter(this.getValue());\n  }\n  render() {\n    return [\n      <br/>,\n      this.props.filterData.map((item) => {\n        return (\n          <React.Fragment>\n            <input type='checkbox' value={item} name='price_filter'/>\n            <label>{item}</label>\n            <br/>\n          </React.Fragment>)\n      }),\n      <button\n        key=\"submit\"\n        className=\"btn btn-warning\"\n        onClick={ this.filter }\n      >\n        { `Filter ${this.props.column.text}` }\n      </button>\n\n    ];\n  }\n}\n\nfunction App() {\n  const productsGenerator = (quantity = 5, callback) => {\n    if (callback) return Array.from({ length: quantity }, callback);\n  \n    // if no given callback, retrun default product format.\n    return (\n      Array.from({ length: quantity }, (value, index) => ({\n        id: index,\n        name: `Item name ${index}`,\n        price: 2100 + index\n      }))\n    );\n  };\n\n  // const products = productsGenerator();\n  const [products, setProducts] = useState(productsGenerator());\n\n  const productNames = products.map(item => item.name);\n  const productPrices = products.map(item => item.price);\n\n  const columns = [{\n    dataField: 'id',\n    text: 'Product ID'\n  }, {\n    dataField: 'name',\n    text: 'Product Name',\n    filter: customFilter({\n      type: FILTER_TYPES.MULTISELECT,\n    }),\n    filterRenderer: (onFilter, column) =>\n      <PriceFilter onFilter={ onFilter } column={ column } filterData={productNames} />\n  }, {\n    dataField: 'price',\n    text: 'Product Price',\n    filter: customFilter({\n      type: FILTER_TYPES.MULTISELECT,\n    }),\n    filterRenderer: (onFilter, column) =>\n      <PriceFilter onFilter={ onFilter } column={ column } filterData={productPrices} />\n  }];\n\n  return <BootstrapTable keyField='id' data={ products } columns={ columns } filter={ filterFactory() } />\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}